<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="theme-color" content="#007bff">
    <title>Enhanced Quiz Application | Nasir Ahmad Indian Army</title>
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- FontAwesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"/>
    <!-- EmailJS -->
    <script src="https://cdn.jsdelivr.net/npm/emailjs-com@3/dist/email.min.js"></script>
    <style>
        /* importing google fonts */
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background: #007bff;
        }

        .auth-container {
            max-width: 500px;
            margin: 50px auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            padding: 30px;
        }

        .pattern-lock-container {
            max-width: 400px;
            margin: 50px auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            padding: 30px;
            text-align: center;
        }

        .pattern-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin: 30px auto;
            max-width: 300px;
            position: relative;
        }

        .pattern-dot {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: #f0f0f0;
            border: 2px solid #ddd;
            margin: 0 auto;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
            z-index: 2;
        }

        .pattern-dot.active {
            background-color: #007bff;
            border-color: #0056b3;
        }

        .pattern-line {
            position: absolute;
            height: 4px;
            background-color: #007bff;
            transform-origin: 0 0;
            z-index: 1;
            pointer-events: none;
        }

        .captcha-container {
            max-width: 400px;
            margin: 50px auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            padding: 30px;
            text-align: center;
        }

        .captcha-box {
            font-size: 30px;
            font-weight: bold;
            letter-spacing: 5px;
            background: #f0f0f0;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            user-select: none;
            font-family: 'Courier New', monospace;
        }

        .subject-selection {
            max-width: 800px;
            margin: 50px auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            padding: 30px;
        }

        .subject-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            margin: 10px 0;
            cursor: pointer;
            transition: all 0.3s;
        }

        .subject-card:hover {
            background-color: #f8f9fa;
            border-color: #007bff;
        }

        .subject-card.selected {
            background-color: #e7f3ff;
            border-color: #007bff;
        }

        .subject-code {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }

        .profile-section {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .profile-pic {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #007bff;
            margin-right: 20px;
        }

        /* Original Quiz Styles */
        ::selection {
            color: #fff;
            background: #007bff;
        }

        .start_btn,
        .info_box,
        .quiz_box,
        .result_box {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 
                        0 6px 20px 0 rgba(0, 0, 0, 0.19);
        }

        .info_box.activeInfo,
        .quiz_box.activeQuiz,
        .result_box.activeResult {
            opacity: 1;
            z-index: 5;
            pointer-events: auto;
            transform: translate(-50%, -50%) scale(1);
        }

        .start_btn button {
            font-size: 25px;
            font-weight: 500;
            color: #007bff;
            padding: 15px 30px;
            outline: none;
            border: none;
            border-radius: 5px;
            background: #fff;
            cursor: pointer;
        }

        .info_box {
            width: 540px;
            background: #fff;
            border-radius: 5px;
            transform: translate(-50%, -50%) scale(0.9);
            opacity: 0;
            pointer-events: none;
            transition: all 0.3s ease;
        }

        .info_box .info-title {
            height: 60px;
            width: 100%;
            border-bottom: 1px solid lightgrey;
            display: flex;
            align-items: center;
            padding: 0 30px;
            border-radius: 5px 5px 0 0;
            font-size: 20px;
            font-weight: 600;
        }

        .info_box .info-list {
            padding: 15px 30px;
        }

        .info_box .info-list .info {
            margin: 5px 0;
            font-size: 17px;
        }

        .info_box .info-list .info span {
            font-weight: 600;
            color: #007bff;
        }
        .info_box .buttons {
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding: 0 30px;
            border-top: 1px solid lightgrey;
        }

        .info_box .buttons button {
            margin: 0 5px;
            height: 40px;
            width: 100px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            border: none;
            outline: none;
            border-radius: 5px;
            border: 1px solid #007bff;
            transition: all 0.3s ease;
        }

        .quiz_box {
            width: 550px;
            background: #fff;
            border-radius: 5px;
            transform: translate(-50%, -50%) scale(0.9);
            opacity: 0;
            pointer-events: none;
            transition: all 0.3s ease;
        }

        .quiz_box header {
            position: relative;
            z-index: 2;
            height: 70px;
            padding: 0 30px;
            background: #fff;
            border-radius: 5px 5px 0 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0px 3px 5px 1px rgba(0,0,0,0.1);
        }

        .quiz_box header .title {
            font-size: 20px;
            font-weight: 600;
        }

        .quiz_box header .timer {
            color: #004085;
            background: #cce5ff;
            border: 1px solid #b8daff;
            height: 45px;
            padding: 0 8px;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 145px;
        }

        .quiz_box header .timer .time_left_txt {
            font-weight: 400;
            font-size: 17px;
            user-select: none;
        }

        .quiz_box header .timer .timer_sec {
            font-size: 18px;
            font-weight: 500;
            height: 30px;
            width: 45px;
            color: #fff;
            border-radius: 5px;
            line-height: 30px;
            text-align: center;
            background: #343a40;
            border: 1px solid #343a40;
            user-select: none;
        }

        .quiz_box header .time_line {
            position: absolute;
            bottom: 0px;
            left: 0px;
            height: 3px;
            background: #007bff;
        }

        section {
            padding: 25px 30px 20px 30px;
            background: #fff;
        }

        section .que_text {
            font-size: 25px;
            font-weight: 600;
        }

        section .option_list {
            padding: 20px 0px;
            display: block;   
        }

        section .option_list .option {
            background: aliceblue;
            border: 1px solid #84c5fe;
            border-radius: 5px;
            padding: 8px 15px;
            font-size: 17px;
            margin-bottom: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        section .option_list .option:last-child {
            margin-bottom: 0px;
        }

        section .option_list .option:hover {
            color: #000080;
            background: #cce5ff;
            border: 1px solid #b8daff;
        }

        section .option_list .option.correct {
            color: black;
            background: green;
            border: 1px solid #c3e6cb;
        }

        section .option_list .option.incorrect {
            color: black;
            background: red;
            border: 1px solid #f5c6cb;
        }

        section .option_list .option.disabled {
            pointer-events: none;
        }

        section .option_list .option .icon {
            height: 26px;
            width: 26px;
            border: 2px solid transparent;
            border-radius: 50%;
            text-align: center;
            font-size: 13px;
            pointer-events: none;
            transition: all 0.3s ease;
            line-height: 24px;
        }
        .option_list .option .icon.tick {
            color: #23903c;
            border-color: #23903c;
            background: #d4edda;
        }

        .option_list .option .icon.cross {
            color: #a42834;
            background: #f8d7da;
            border-color: #a42834;
        }

        footer {
            height: 60px;
            padding: 0 30px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-top: 1px solid lightgrey;
        }

        footer .total_que span {
            display: flex;
            user-select: none;
        }

        footer .total_que span p {
            font-weight: 500;
            padding: 0 5px;
        }

        footer .total_que span p:first-child {
            padding-left: 0px;
        }

        footer button {
            height: 40px;
            padding: 0 13px;
            font-size: 18px;
            font-weight: 400;
            cursor: pointer;
            border: none;
            outline: none;
            color: #fff;
            border-radius: 5px;
            background: #007bff;
            border: 1px solid #007bff;
            line-height: 10px;
            opacity: 0;
            pointer-events: none;
            transform: scale(0.95);
            transition: all 0.3s ease;
        }

        footer button:hover {
            background: #0263ca;
        }

        footer button.show {
            opacity: 1;
            pointer-events: auto;
            transform: scale(1);
        }

        .result_box {
            background: #fff;
            border-radius: 5px;
            display: flex;
            padding: 25px 30px;
            width: 550px;
            align-items: center;
            flex-direction: column;
            justify-content: center;
            transform: translate(-50%, -50%) scale(0.9);
            opacity: 0;
            pointer-events: none;
            transition: all 0.3s ease;
        }

        .result_box .icon {
            font-size: 100px;
            color: #007bff;
            margin-bottom: 10px;
        }

        .result_box .complete_text {
            font-size: 20px;
            font-weight: 500;
        }

        .result_box .score_text span {
            display: flex;
            margin: 10px 0;
            font-size: 18px;
            font-weight: 500;
        }

        .result_box .score_text span p {
            padding: 0 4px;
            font-weight: 600;
        }

        .result_box .buttons {
            display: flex;
            margin: 20px 0;
        }

        .result_box .buttons button {
            margin: 0 10px;
            height: 45px;
            padding: 0 20px;
            font-size: 18px;
            font-weight: 500;
            cursor: pointer;
            border: none;
            outline: none;
            border-radius: 5px;
            border: 1px solid #007bff;
            transition: all 0.3s ease;
        }

        .buttons button.restart {
            color: #fff;
            background: #007bff;
        }

        .buttons button.restart:hover {
            background: #0263ca;
        }

        .buttons button.quit {
            color: #007bff;
            background: #fff;
        }

        .buttons button.quit:hover {
            color: #fff;
            background: #007bff;
        }

        .user-info-section {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .user-profile-pic {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 20px;
            border: 3px solid #007bff;
        }

        .user-details {
            flex: 1;
        }

        .export-btn {
            margin-top: 20px;
        }

        .hidden {
            display: none;
        }

        .form-label {
            font-weight: 500;
        }

        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #6c757d;
        }

        .password-container {
            position: relative;
        }

        /* Review Page Styles */
        .review-container {
            max-width: 800px;
            margin: 50px auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            padding: 30px;
        }

        .search-container {
            margin-bottom: 20px;
        }

        .question-review {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .question-review.correct {
            border-left: 5px solid green;
        }

        .question-review.incorrect {
            border-left: 5px solid red;
        }

        .user-answer {
            font-weight: bold;
        }

        .correct-answer {
            font-weight: bold;
            color: green;
        }

        /* Certificate Styles */
        .certificate-container {
            max-width: 800px;
            margin: 50px auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            padding: 30px;
            text-align: center;
        }

        .certificate {
            border: 10px solid #007bff;
            padding: 40px;
            background: #fff;
            position: relative;
        }

        .certificate-header {
            margin-bottom: 30px;
        }

        .certificate-title {
            font-size: 36px;
            font-weight: bold;
            color: #007bff;
            margin-bottom: 10px;
        }

        .certificate-subtitle {
            font-size: 20px;
            color: #333;
            margin-bottom: 30px;
        }

        .certificate-body {
            margin-bottom: 30px;
            text-align: left;
        }

        .certificate-user-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .certificate-user-details {
            flex: 1;
        }

        .certificate-user-pic {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #007bff;
        }

        .certificate-score {
            font-size: 24px;
            margin: 20px 0;
        }

        .certificate-code {
            font-size: 18px;
            margin: 10px 0;
        }

        .certificate-footer {
            margin-top: 30px;
            border-top: 2px solid #007bff;
            padding-top: 20px;
        }

        .certificate-signature {
            display: flex;
            justify-content: space-between;
        }

        .signature-box {
            text-align: center;
        }

        .signature-line {
            width: 200px;
            border-top: 1px solid #000;
            margin: 10px auto;
        }

        .security-container {
            max-width: 400px;
            margin: 50px auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            padding: 30px;
        }
    </style>
</head>
<body>
    <!-- Registration Page -->
    <div id="registrationPage" class="auth-container">
        <h2 class="text-center mb-4">Register for Quiz</h2>
        <form id="registrationForm">
            <div class="mb-3">
                <label for="regName" class="form-label">Full Name</label>
                <input type="text" class="form-control" id="regName" required>
            </div>
            <div class="mb-3">
                <label for="regEmail" class="form-label">Email address</label>
                <input type="email" class="form-control" id="regEmail" required>
            </div>
            <div class="mb-3">
                <label for="regPhone" class="form-label">Phone Number</label>
                <input type="tel" class="form-control" id="regPhone" required>
            </div>
            <div class="mb-3 password-container">
                <label for="regPassword" class="form-label">Password</label>
                <input type="password" class="form-control" id="regPassword" required>
                <span class="password-toggle" id="toggleRegPassword">
                    <i class="fas fa-eye"></i>
                </span>
            </div>
            <div class="mb-3">
                <label for="regProfilePic" class="form-label">Profile Picture</label>
                <input type="file" class="form-control" id="regProfilePic" accept="image/*">
                <div class="mt-2">
                    <img id="profilePreview" src="#" alt="Profile Preview" class="profile-pic hidden">
                </div>
            </div>
            <button type="submit" class="btn btn-primary w-100">Register</button>
        </form>
        <p class="mt-3 text-center">Already have an account? <a href="#" id="showLogin">Login</a></p>
    </div>

    <!-- Login Page -->
    <div id="loginPage" class="auth-container hidden">
        <h2 class="text-center mb-4">Login to Quiz</h2>
        <form id="loginForm">
            <div class="mb-3">
                <label for="loginEmail" class="form-label">Email address</label>
                <input type="email" class="form-control" id="loginEmail" required>
            </div>
            <div class="mb-3 password-container">
                <label for="loginPassword" class="form-label">Password</label>
                <input type="password" class="form-control" id="loginPassword" required>
                <span class="password-toggle" id="toggleLoginPassword">
                    <i class="fas fa-eye"></i>
                </span>
            </div>
            <button type="submit" class="btn btn-primary w-100">Login</button>
        </form>
        <p class="mt-3 text-center">Don't have an account? <a href="#" id="showRegister">Register</a></p>
    </div>

    <!-- Pattern Lock Page -->
    <div id="patternLockPage" class="pattern-lock-container hidden">
        <h2 class="text-center mb-4">Pattern Lock</h2>
        <p>Draw your pattern to unlock</p>
        <div class="pattern-grid" id="patternGrid">
            <!-- Pattern dots will be generated by JavaScript -->
        </div>
        <div class="mt-3">
            <button id="resetPattern" class="btn btn-secondary">Reset Pattern</button>
        </div>
        <div class="mt-3">
            <p id="patternMessage" class="text-danger"></p>
        </div>
    </div>

    <!-- Captcha Page -->
    <div id="captchaPage" class="captcha-container hidden">
        <h2 class="text-center mb-4">Captcha Verification</h2>
        <p>Please enter the text shown below:</p>
        <div class="captcha-box" id="captchaText">ABCD</div>
        <div class="mb-3">
            <input type="text" class="form-control" id="captchaInput" placeholder="Enter captcha text">
        </div>
        <button id="verifyCaptcha" class="btn btn-primary">Verify</button>
        <button id="refreshCaptcha" class="btn btn-secondary">Refresh</button>
        <div class="mt-3">
            <p id="captchaMessage" class="text-danger"></p>
        </div>
    </div>

    <!-- Subject Selection Page -->
    <div id="subjectSelectionPage" class="subject-selection hidden">
        <h2 class="text-center mb-4">Select Quiz Subject</h2>
        <div class="row">
            <div class="col-md-6">
                <div class="subject-card" data-subject="english">
                    <h5>English Language and Literature</h5>
                    <p class="subject-code">Subject Code: 184</p>
                    <p>Test your knowledge on English language and literature</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="subject-card" data-subject="hindi">
                    <h5>Hindi Course</h5>
                    <p>Questions about Hindi language and literature</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="subject-card" data-subject="math">
                    <h5>Mathematics</h5>
                    <p>Solve mathematical problems and equations</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="subject-card" data-subject="science">
                    <h5>Science</h5>
                    <p class="subject-code">Subject Code: 086</p>
                    <p>Questions about biology, physics, and chemistry</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="subject-card" data-subject="social">
                    <h5>Social Science</h5>
                    <p class="subject-code">Subject Code: 087</p>
                    <p>Questions about history, geography, civics, and economics</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="subject-card" data-subject="it">
                    <h5>Information Technology</h5>
                    <p class="subject-code">Subject Code: 402</p>
                    <p>Questions about computer science and IT</p>
                </div>
            </div>
        </div>
        <div class="text-center mt-4">
            <button id="startQuizBtn" class="btn btn-primary">Start Quiz</button>
        </div>
    </div>

    <!-- Original Quiz Components (hidden initially) -->
    <div class="start_btn hidden"><button>Start Quiz</button></div>

    <!-- Info Box -->
    <div class="info_box">
        <div class="info-title"><span>Some Rules of this Quiz</span></div>
        <div class="info-list">
            <div class="info">1. You will have only <span>15 seconds</span> per each question.</div>
            <div class="info">2. Once you select your answer, it can't be undone.</div>
            <div class="info">3. You can't select any option once time goes off.</div>
            <div class="info">4. You can't exit from the Quiz while you're playing.</div>
            <div class="info">5. You'll get points on the basis of your correct answers.</div>
        </div>
        <div class="buttons">
            <button class="quit">Exit Quiz</button>
            <button class="restart">Continue</button>
        </div>
    </div>

    <!-- Quiz Box -->
    <div class="quiz_box">
        <header>
            <div class="title">Awesome Quiz Application</div>
            <div class="timer">
                <div class="time_left_txt">Time Left</div>
                <div class="timer_sec">15</div>
            </div>
            <div class="time_line"></div>
        </header>
        <section>
            <div class="que_text">
                <!-- Here I've inserted question from JavaScript -->
            </div>
            <div class="option_list">
                <!-- Here I've inserted options from JavaScript -->
            </div>
        </section>

        <!-- footer of Quiz Box -->
        <footer>
            <div class="total_que">
                <!-- Here I've inserted Question Count Number from JavaScript -->
            </div>
            <button class="next_btn">Next Que</button>
        </footer>
    </div>

    <!-- Result Box -->
    <div class="result_box">
        <div class="icon">
            <i class="fas fa-crown"></i>
        </div>
        <div class="complete_text">You've completed the Quiz!</div>
        <div class="user-info-section">
            <img id="resultProfilePic" src="#" alt="Profile Picture" class="user-profile-pic">
            <div class="user-details">
                <h5 id="resultUserName">User Name</h5>
                <p id="resultUserEmail">user@example.com</p>
                <p id="resultDate">Date: </p>
            </div>
        </div>
        <div class="score_text">
            <!-- Here I've inserted Score Result from JavaScript -->
        </div>
        <div class="buttons">
            <button class="restart">Replay Quiz</button>
            <button class="quit">Quit Quiz</button>
            <button class="export-btn" id="reviewAnswers">Review Answers</button>
            <button class="export-btn" id="generateCertificate">Generate Certificate</button>
        </div>
    </div>

    <!-- Review Answers Page -->
    <div id="reviewPage" class="review-container hidden">
        <h2 class="text-center mb-4">Review Your Answers</h2>
        <div class="search-container">
            <input type="text" class="form-control" id="searchQuestions" placeholder="Search questions...">
        </div>
        <div id="reviewQuestions">
            <!-- Review questions will be inserted here -->
        </div>
        <div class="text-center mt-4">
            <button id="backToResults" class="btn btn-primary">Back to Results</button>
        </div>
    </div>

    <!-- Certificate Security Page -->
    <div id="certificateSecurityPage" class="security-container hidden">
        <h2 class="text-center mb-4">Certificate Security</h2>
        <p>Please enter your email and password to download certificate</p>
        <form id="certificateSecurityForm">
            <div class="mb-3">
                <label for="certEmail" class="form-label">Email address</label>
                <input type="email" class="form-control" id="certEmail" required>
            </div>
            <div class="mb-3 password-container">
                <label for="certPassword" class="form-label">Password</label>
                <input type="password" class="form-control" id="certPassword" required>
                <span class="password-toggle" id="toggleCertPassword">
                    <i class="fas fa-eye"></i>
                </span>
            </div>
            <button type="submit" class="btn btn-primary w-100">Download Certificate</button>
        </form>
        <div class="mt-3">
            <p id="certSecurityMessage" class="text-danger"></p>
        </div>
    </div>

    <!-- Certificate Page -->
    <div id="certificatePage" class="certificate-container hidden">
        <div class="certificate" id="certificateContent">
            <div class="certificate-header">
                <div class="certificate-title">CERTIFICATE OF ACHIEVEMENT</div>
                <div class="certificate-subtitle">This certifies that</div>
            </div>
            <div class="certificate-body">
                <div class="certificate-user-info">
                    <div class="certificate-user-details">
                        <h3 id="certUserName">User Name</h3>
                        <p id="certUserEmail">user@example.com</p>
                        <p id="certUserPhone">Phone: </p>
                        <p id="certSubject">Subject: </p>
                        <p id="certScore">Score: </p>
                        <p id="certDate">Date: </p>
                    </div>
                    <img id="certUserPic" src="#" alt="Profile Picture" class="certificate-user-pic">
                </div>
                <div class="certificate-code">
                    <p>Certificate Code: <span id="certCode">0000</span></p>
                </div>
                <div class="certificate-answers">
                    <h5>Question Review:</h5>
                    <div id="certQuestions">
                        <!-- Certificate questions will be inserted here -->
                    </div>
                </div>
            </div>
            <div class="certificate-footer">
                <div class="certificate-signature">
                    <div class="signature-box">
                        <div class="signature-line"></div>
                        <p>Principal Signature</p>
                    </div>
                    <div class="signature-box">
                        <div class="signature-line"></div>
                        <p>Teacher Signature</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="text-center mt-4">
            <button id="downloadCertificate" class="btn btn-primary">Download as PDF</button>
            <button id="backToResultsFromCert" class="btn btn-secondary">Back to Results</button>
        </div>
    </div>

    <!-- Bootstrap 5 JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <!-- jsPDF for PDF export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

    <script>
        // Initialize EmailJS
        (function(){
            emailjs.init("syEHQhyPHKMfevvVo");
        })();

        // User data storage
        let users = JSON.parse(localStorage.getItem('quizUsers')) || [];
        let currentUser = null;
        let selectedSubject = 'english';
        let userPattern = [];
        let correctPattern = [1, 2, 3, 6, 9]; // Example pattern
        let userAnswers = []; // Store user answers for review
        let certificateCode = null;

        // DOM Elements
        const registrationPage = document.getElementById('registrationPage');
        const loginPage = document.getElementById('loginPage');
        const patternLockPage = document.getElementById('patternLockPage');
        const captchaPage = document.getElementById('captchaPage');
        const subjectSelectionPage = document.getElementById('subjectSelectionPage');
        const reviewPage = document.getElementById('reviewPage');
        const certificateSecurityPage = document.getElementById('certificateSecurityPage');
        const certificatePage = document.getElementById('certificatePage');
        const startQuizBtn = document.getElementById('startQuizBtn');
        const registrationForm = document.getElementById('registrationForm');
        const loginForm = document.getElementById('loginForm');
        const profilePicInput = document.getElementById('regProfilePic');
        const profilePreview = document.getElementById('profilePreview');
        const showLoginLink = document.getElementById('showLogin');
        const showRegisterLink = document.getElementById('showRegister');
        const patternGrid = document.getElementById('patternGrid');
        const resetPatternBtn = document.getElementById('resetPattern');
        const patternMessage = document.getElementById('patternMessage');
        const captchaText = document.getElementById('captchaText');
        const captchaInput = document.getElementById('captchaInput');
        const verifyCaptchaBtn = document.getElementById('verifyCaptcha');
        const refreshCaptchaBtn = document.getElementById('refreshCaptcha');
        const captchaMessage = document.getElementById('captchaMessage');
        const subjectCards = document.querySelectorAll('.subject-card');
        const reviewAnswersBtn = document.getElementById('reviewAnswers');
        const generateCertificateBtn = document.getElementById('generateCertificate');
        const backToResultsBtn = document.getElementById('backToResults');
        const searchQuestionsInput = document.getElementById('searchQuestions');
        const reviewQuestionsContainer = document.getElementById('reviewQuestions');
        const certificateSecurityForm = document.getElementById('certificateSecurityForm');
        const certSecurityMessage = document.getElementById('certSecurityMessage');
        const downloadCertificateBtn = document.getElementById('downloadCertificate');
        const backToResultsFromCertBtn = document.getElementById('backToResultsFromCert');

        // Password toggle functionality
        document.getElementById('toggleRegPassword').addEventListener('click', function() {
            togglePassword('regPassword', this);
        });

        document.getElementById('toggleLoginPassword').addEventListener('click', function() {
            togglePassword('loginPassword', this);
        });

        document.getElementById('toggleCertPassword').addEventListener('click', function() {
            togglePassword('certPassword', this);
        });

        function togglePassword(inputId, toggleElement) {
            const passwordInput = document.getElementById(inputId);
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                toggleElement.innerHTML = '<i class="fas fa-eye-slash"></i>';
            } else {
                passwordInput.type = 'password';
                toggleElement.innerHTML = '<i class="fas fa-eye"></i>';
            }
        }

        // Profile picture preview
        profilePicInput.addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    profilePreview.src = e.target.result;
                    profilePreview.classList.remove('hidden');
                }
                reader.readAsDataURL(file);
            }
        });

        // Registration form submission
        registrationForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const name = document.getElementById('regName').value;
            const email = document.getElementById('regEmail').value;
            const phone = document.getElementById('regPhone').value;
            const password = document.getElementById('regPassword').value;
            const profilePic = profilePreview.src;

            // Check if user already exists
            if (users.find(user => user.email === email)) {
                alert('User with this email already exists!');
                return;
            }

            // Generate user code (0-9)
            const userCode = Math.floor(Math.random() * 10);

            // Save user data
            const userData = {
                name,
                email,
                phone,
                password,
                profilePic,
                userCode,
                registrationDate: new Date().toISOString()
            };

            users.push(userData);
            localStorage.setItem('quizUsers', JSON.stringify(users));

            alert('Registration successful! Your user code is: ' + userCode);
            showLogin();
        });

        // Login form submission
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;

            // Find user
            const user = users.find(u => u.email === email && u.password === password);

            if (user) {
                currentUser = user;
                showPatternLock();
            } else {
                alert('Invalid email or password!');
            }
        });

        // Show registration page
        showRegisterLink.addEventListener('click', function(e) {
            e.preventDefault();
            showRegistration();
        });

        // Show login page
        showLoginLink.addEventListener('click', function(e) {
            e.preventDefault();
            showLogin();
        });

        function showRegistration() {
            registrationPage.classList.remove('hidden');
            loginPage.classList.add('hidden');
            patternLockPage.classList.add('hidden');
            captchaPage.classList.add('hidden');
            subjectSelectionPage.classList.add('hidden');
        }

        function showLogin() {
            registrationPage.classList.add('hidden');
            loginPage.classList.remove('hidden');
            patternLockPage.classList.add('hidden');
            captchaPage.classList.add('hidden');
            subjectSelectionPage.classList.add('hidden');
        }

        function showPatternLock() {
            registrationPage.classList.add('hidden');
            loginPage.classList.add('hidden');
            patternLockPage.classList.remove('hidden');
            captchaPage.classList.add('hidden');
            subjectSelectionPage.classList.add('hidden');
            initializePatternLock();
        }

        function showCaptcha() {
            registrationPage.classList.add('hidden');
            loginPage.classList.add('hidden');
            patternLockPage.classList.add('hidden');
            captchaPage.classList.remove('hidden');
            subjectSelectionPage.classList.add('hidden');
            generateCaptcha();
        }

        function showSubjectSelection() {
            registrationPage.classList.add('hidden');
            loginPage.classList.add('hidden');
            patternLockPage.classList.add('hidden');
            captchaPage.classList.add('hidden');
            subjectSelectionPage.classList.remove('hidden');
        }

        // Pattern Lock functionality
        function initializePatternLock() {
            patternGrid.innerHTML = '';
            userPattern = [];
            
            // Create pattern dots
            for (let i = 1; i <= 9; i++) {
                const dot = document.createElement('div');
                dot.className = 'pattern-dot';
                dot.dataset.id = i;
                patternGrid.appendChild(dot);
            }
            
            // Add event listeners for pattern drawing
            let isDrawing = false;
            let patternLine = null;
            
            patternGrid.addEventListener('mousedown', startDrawing);
            patternGrid.addEventListener('touchstart', startDrawing);
            
            patternGrid.addEventListener('mouseup', stopDrawing);
            patternGrid.addEventListener('touchend', stopDrawing);
            
            patternGrid.addEventListener('mousemove', drawPattern);
            patternGrid.addEventListener('touchmove', drawPattern);
            
            function startDrawing(e) {
                e.preventDefault();
                isDrawing = true;
                userPattern = [];
                patternMessage.textContent = '';
                
                // Remove active class from all dots
                document.querySelectorAll('.pattern-dot').forEach(dot => {
                    dot.classList.remove('active');
                });
                
                // Remove existing line
                if (patternLine) {
                    patternLine.remove();
                }
                
                // Add the first point
                const point = getPointFromEvent(e);
                if (point) {
                    addPointToPattern(point);
                }
            }
            
            function stopDrawing(e) {
                if (!isDrawing) return;
                isDrawing = false;
                
                // Check pattern
                if (userPattern.length > 0) {
                    checkPattern();
                }
            }
            
            function drawPattern(e) {
                if (!isDrawing) return;
                e.preventDefault();
                
                const point = getPointFromEvent(e);
                if (point && !userPattern.includes(point)) {
                    addPointToPattern(point);
                }
            }
            
            function getPointFromEvent(e) {
                let clientX, clientY;
                
                if (e.type.includes('touch')) {
                    clientX = e.touches[0].clientX;
                    clientY = e.touches[0].clientY;
                } else {
                    clientX = e.clientX;
                    clientY = e.clientY;
                }
                
                const rect = patternGrid.getBoundingClientRect();
                const x = clientX - rect.left;
                const y = clientY - rect.top;
                
                // Check if the point is inside any dot
                for (let i = 1; i <= 9; i++) {
                    const dot = document.querySelector(`.pattern-dot[data-id="${i}"]`);
                    const dotRect = dot.getBoundingClientRect();
                    const dotCenterX = dotRect.left + dotRect.width/2 - rect.left;
                    const dotCenterY = dotRect.top + dotRect.height/2 - rect.top;
                    
                    const distance = Math.sqrt(
                        Math.pow(x - dotCenterX, 2) + 
                        Math.pow(y - dotCenterY, 2)
                    );
                    
                    if (distance <= dotRect.width/2) {
                        return i;
                    }
                }
                
                return null;
            }
            
            function addPointToPattern(point) {
                userPattern.push(point);
                
                // Activate the dot
                const dot = document.querySelector(`.pattern-dot[data-id="${point}"]`);
                dot.classList.add('active');
                
                // Draw line between points
                if (userPattern.length > 1) {
                    drawLine(userPattern[userPattern.length - 2], point);
                }
            }
            
            function drawLine(from, to) {
                const fromDot = document.querySelector(`.pattern-dot[data-id="${from}"]`);
                const toDot = document.querySelector(`.pattern-dot[data-id="${to}"]`);
                
                const fromRect = fromDot.getBoundingClientRect();
                const toRect = toDot.getBoundingClientRect();
                const gridRect = patternGrid.getBoundingClientRect();
                
                const fromX = fromRect.left + fromRect.width/2 - gridRect.left;
                const fromY = fromRect.top + fromRect.height/2 - gridRect.top;
                const toX = toRect.left + toRect.width/2 - gridRect.left;
                const toY = toRect.top + toRect.height/2 - gridRect.top;
                
                const length = Math.sqrt(Math.pow(toX - fromX, 2) + Math.pow(toY - fromY, 2));
                const angle = Math.atan2(toY - fromY, toX - fromX) * 180 / Math.PI;
                
                if (!patternLine) {
                    patternLine = document.createElement('div');
                    patternLine.className = 'pattern-line';
                    patternGrid.appendChild(patternLine);
                }
                
                patternLine.style.width = length + 'px';
                patternLine.style.left = fromX + 'px';
                patternLine.style.top = fromY + 'px';
                patternLine.style.transform = `rotate(${angle}deg)`;
            }
            
            function checkPattern() {
                // Simple pattern check - in a real app, you would compare with a stored pattern
                if (userPattern.join('') === correctPattern.join('')) {
                    patternMessage.textContent = 'Pattern correct!';
                    patternMessage.className = 'text-success';
                    setTimeout(() => {
                        showCaptcha();
                    }, 1000);
                } else {
                    patternMessage.textContent = 'Incorrect pattern. Try again.';
                    patternMessage.className = 'text-danger';
                }
            }
            
            // Reset pattern button
            resetPatternBtn.addEventListener('click', function() {
                userPattern = [];
                patternMessage.textContent = '';
                
                // Remove active class from all dots
                document.querySelectorAll('.pattern-dot').forEach(dot => {
                    dot.classList.remove('active');
                });
                
                // Remove line
                if (patternLine) {
                    patternLine.remove();
                    patternLine = null;
                }
            });
        }

        // Captcha functionality
        function generateCaptcha() {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let captcha = '';
            for (let i = 0; i < 6; i++) {
                captcha += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            captchaText.textContent = captcha;
            captchaInput.value = '';
            captchaMessage.textContent = '';
        }

        verifyCaptchaBtn.addEventListener('click', function() {
            if (captchaInput.value === captchaText.textContent) {
                captchaMessage.textContent = 'Captcha verified!';
                captchaMessage.className = 'text-success';
                setTimeout(() => {
                    showSubjectSelection();
                }, 1000);
            } else {
                captchaMessage.textContent = 'Incorrect captcha. Try again.';
                captchaMessage.className = 'text-danger';
                generateCaptcha();
            }
        });

        refreshCaptchaBtn.addEventListener('click', generateCaptcha);

        // Subject selection
        subjectCards.forEach(card => {
            card.addEventListener('click', function() {
                subjectCards.forEach(c => c.classList.remove('selected'));
                this.classList.add('selected');
                selectedSubject = this.dataset.subject;
            });
        });

        // Start quiz button
        startQuizBtn.addEventListener('click', function() {
            // Generate certificate code before starting quiz
            certificateCode = Math.floor(Math.random() * 10);
            
            // Show the quiz start button
            document.querySelector('.start_btn').classList.remove('hidden');
            subjectSelectionPage.classList.add('hidden');
            
            // Initialize quiz with selected subject
            initializeQuiz(selectedSubject);
        });

        // Review answers button
        reviewAnswersBtn.addEventListener('click', function() {
            showReviewPage();
        });

        // Generate certificate button
        generateCertificateBtn.addEventListener('click', function() {
            showCertificateSecurity();
        });

        // Back to results button
        backToResultsBtn.addEventListener('click', function() {
            reviewPage.classList.add('hidden');
            document.querySelector('.result_box').classList.add('activeResult');
        });

        // Search questions in review
        searchQuestionsInput.addEventListener('input', function() {
            filterReviewQuestions(this.value);
        });

        // Certificate security form
        certificateSecurityForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const email = document.getElementById('certEmail').value;
            const password = document.getElementById('certPassword').value;

            if (email === currentUser.email && password === currentUser.password) {
                showCertificate();
            } else {
                certSecurityMessage.textContent = 'Invalid email or password!';
            }
        });

        // Download certificate as PDF
        downloadCertificateBtn.addEventListener('click', function() {
            // Using html2canvas and jsPDF to generate PDF
            const { jsPDF } = window.jspdf;
            
            html2canvas(document.getElementById('certificateContent')).then(canvas => {
                const imgData = canvas.toDataURL('image/png');
                const pdf = new jsPDF('l', 'mm', 'a4');
                const imgWidth = 297; // A4 width in mm
                const imgHeight = canvas.height * imgWidth / canvas.width;
                
                pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
                pdf.save('certificate_' + currentUser.name + '.pdf');
            });
        });

        // Back to results from certificate
        backToResultsFromCertBtn.addEventListener('click', function() {
            certificatePage.classList.add('hidden');
            document.querySelector('.result_box').classList.add('activeResult');
        });

        function showReviewPage() {
            document.querySelector('.result_box').classList.remove('activeResult');
            reviewPage.classList.remove('hidden');
            
            // Populate review questions
            populateReviewQuestions();
        }

        function showCertificateSecurity() {
            document.querySelector('.result_box').classList.remove('activeResult');
            certificateSecurityPage.classList.remove('hidden');
        }

        function showCertificate() {
            certificateSecurityPage.classList.add('hidden');
            certificatePage.classList.remove('hidden');
            
            // Populate certificate data
            document.getElementById('certUserName').textContent = currentUser.name;
            document.getElementById('certUserEmail').textContent = currentUser.email;
            document.getElementById('certUserPhone').textContent = 'Phone: ' + currentUser.phone;
            document.getElementById('certUserPic').src = currentUser.profilePic;
            document.getElementById('certSubject').textContent = 'Subject: ' + getSubjectName(selectedSubject);
            document.getElementById('certScore').textContent = 'Score: ' + score + ' out of ' + questions.length;
            document.getElementById('certDate').textContent = 'Date: ' + new Date().toLocaleDateString();
            document.getElementById('certCode').textContent = certificateCode;
            
            // Populate certificate questions
            populateCertificateQuestions();
        }

        function getSubjectName(subjectCode) {
            const subjects = {
                'english': 'English Language and Literature',
                'hindi': 'Hindi Course',
                'math': 'Mathematics',
                'science': 'Science',
                'social': 'Social Science',
                'it': 'Information Technology'
            };
            return subjects[subjectCode] || 'Unknown Subject';
        }

        function populateReviewQuestions() {
            reviewQuestionsContainer.innerHTML = '';
            
            questions.forEach((question, index) => {
                const userAnswer = userAnswers[index];
                const isCorrect = userAnswer === question.answer;
                
                const questionDiv = document.createElement('div');
                questionDiv.className = `question-review ${isCorrect ? 'correct' : 'incorrect'}`;
                
                questionDiv.innerHTML = `
                    <h5>Question ${index + 1}: ${question.question}</h5>
                    <p><strong>Your answer:</strong> <span class="user-answer ${isCorrect ? 'text-success' : 'text-danger'}">${question.options[userAnswer]}</span></p>
                    ${!isCorrect ? `<p><strong>Correct answer:</strong> <span class="correct-answer">${question.options[question.answer]}</span></p>` : ''}
                `;
                
                reviewQuestionsContainer.appendChild(questionDiv);
            });
        }

        function populateCertificateQuestions() {
            const certQuestionsContainer = document.getElementById('certQuestions');
            certQuestionsContainer.innerHTML = '';
            
            questions.forEach((question, index) => {
                const userAnswer = userAnswers[index];
                const isCorrect = userAnswer === question.answer;
                
                const questionDiv = document.createElement('div');
                questionDiv.className = `mb-2 ${isCorrect ? 'text-success' : 'text-danger'}`;
                
                questionDiv.innerHTML = `
                    <p><strong>Q${index + 1}:</strong> ${question.question}</p>
                    <p>Your answer: ${question.options[userAnswer]} ${isCorrect ? '✓' : '✗'}</p>
                `;
                
                certQuestionsContainer.appendChild(questionDiv);
            });
        }

        function filterReviewQuestions(searchTerm) {
            const questions = document.querySelectorAll('.question-review');
            
            questions.forEach(question => {
                const questionText = question.textContent.toLowerCase();
                if (questionText.includes(searchTerm.toLowerCase())) {
                    question.style.display = 'block';
                } else {
                    question.style.display = 'none';
                }
            });
        }

        // Original Quiz Code with modifications
        let questions = [];
        let que_count = 0;
        let que_numb = 1;
        let userScore = 0;
        let counter;
        let counterLine;
        let widthValue = 0;
        let score = 0;

        const start_btn = document.querySelector(".start_btn button");
        const info_box = document.querySelector(".info_box");
        const exit_btn = info_box.querySelector(".buttons .quit");
        const continue_btn = info_box.querySelector(".buttons .restart");
        const quiz_box = document.querySelector(".quiz_box");
        const result_box = document.querySelector(".result_box");
        const option_list = document.querySelector(".option_list");
        const time_line = document.querySelector("header .time_line");
        const timeText = document.querySelector(".timer .time_left_txt");
        const timeCount = document.querySelector(".timer .timer_sec");

        // Initialize quiz with selected subject
        function initializeQuiz(subject) {
            // Load questions based on subject
            questions = getQuestionsBySubject(subject);
            
            // Reset quiz variables
            que_count = 0;
            que_numb = 1;
            userScore = 0;
            widthValue = 0;
            score = 0;
            userAnswers = [];
            
            // Set quiz title with subject code
            const subjectTitle = document.querySelector(".quiz_box .title");
            const subjectCode = getSubjectCode(subject);
            subjectTitle.textContent = `${getSubjectName(subject)} Quiz - Code: ${subjectCode}`;
        }

        function getSubjectCode(subject) {
            const codes = {
                'english': '184',
                'hindi': '',
                'math': '',
                'science': '086',
                'social': '087',
                'it': '402'
            };
            return codes[subject] || '';
        }

        function getQuestionsBySubject(subject) {
            // This would typically fetch from an API or database
            // For now, we'll use sample questions
            let subjectQuestions = [];
            
            switch(subject) {
                case 'english':
                    subjectQuestions = [
                        {
                            question: "What is the name of the poet who wrote 'The Road Not Taken'?",
                            options: ["Robert Frost", "William Wordsworth", "John Keats", "P.B. Shelley"],
                            answer: 0
                        },
                        {
                            question: "Who is the author of 'The Diary of a Young Girl'?",
                            options: ["Anne Frank", "Helen Keller", "Malala Yousafzai", "J.K. Rowling"],
                            answer: 0
                        },
                        {
                            question: "What is the central theme of the poem 'Wind'?",
                            options: ["Friendship", "Nature's power", "Love", "Freedom"],
                            answer: 1
                        },
                        {
                            question: "In 'The Sound of Music', who is the main character?",
                            options: ["Evelyn Glennie", "Bismillah Khan", "Maria", "Ustad Bismillah Khan"],
                            answer: 0
                        },
                        {
                            question: "What literary device is used in 'The snake trying'?",
                            options: ["Simile", "Metaphor", "Personification", "Alliteration"],
                            answer: 2
                        },
                        {
                            question: "Who wrote 'The Lost Child'?",
                            options: ["Mulk Raj Anand", "Ruskin Bond", "Khushwant Singh", "Arup Kumar Dutta"],
                            answer: 0
                        },
                        {
                            question: "What is the name of the little girl in 'The Little Girl'?",
                            options: ["Kezia", "Sophie", "Matilda", "Alice"],
                            answer: 0
                        },
                        {
                            question: "In 'A Truly Beautiful Mind', who is the scientist referred to?",
                            options: ["Albert Einstein", "Isaac Newton", "Stephen Hawking", "Marie Curie"],
                            answer: 0
                        },
                        {
                            question: "What is the message of 'The Snake and the Mirror'?",
                            options: ["Vanity can be dangerous", "Snakes are dangerous", "Doctors are brave", "Mirrors reflect truth"],
                            answer: 0
                        },
                        {
                            question: "Who is the author of 'The Last Leaf'?",
                            options: ["O. Henry", "William Shakespeare", "Charles Dickens", "Mark Twain"],
                            answer: 0
                        }
                    ];
                    break;
                case 'hindi':
                    subjectQuestions = [
                        {
                            question: "प्रेमचंद की कहानी 'ईदगाह' का मुख्य पात्र कौन है?",
                            options: ["हामिद", "मोहन", "राम", "श्याम"],
                            answer: 0
                        },
                        {
                            question: "'रामलक्ष्मण परशुराम संवाद' किसकी रचना है?",
                            options: ["तुलसीदास", "सूरदास", "कबीर", "मीराबाई"],
                            answer: 0
                        },
                        {
                            question: "'माटी वाली' कहानी के लेखक कौन हैं?",
                            options: ["विद्यासागर नौटियाल", "प्रेमचंद", "महादेवी वर्मा", "जयशंकर प्रसाद"],
                            answer: 0
                        },
                        {
                            question: "कबीर के दोहे किस भाषा में लिखे गए हैं?",
                            options: ["सधुक्कड़ी", "ब्रज", "अवधी", "मैथिली"],
                            answer: 0
                        },
                        {
                            question: "'एक फूल की चाह' कविता के कवि कौन हैं?",
                            options: ["सियारामशरण गुप्त", "महादेवी वर्मा", "सूर्यकांत त्रिपाठी 'निराला'", "सुमित्रानंदन पंत"],
                            answer: 0
                        },
                        {
                            question: "'गिल्लू' पाठ की लेखिका कौन हैं?",
                            options: ["महादेवी वर्मा", "सुभद्रा कुमारी चौहान", "मृदुला गर्ग", "अमृता प्रीतम"],
                            answer: 0
                        },
                        {
                            question: "'स्मृति' पाठ के लेखक कौन हैं?",
                            options: ["श्रीराम शर्मा", "हरिशंकर परसाई", "विष्णु प्रभाकर", "शिवानी"],
                            answer: 0
                        },
                        {
                            question: "'दुःख का अधिकार' कहानी के लेखक कौन हैं?",
                            options: ["यशपाल", "प्रेमचंद", "जैनेन्द्र कुमार", "अज्ञेय"],
                            answer: 0
                        },
                        {
                            question: "'रहीम के दोहे' में रहीम किसके दरबारी कवि थे?",
                            options: ["अकबर", "जहाँगीर", "शाहजहाँ", "औरंगजेब"],
                            answer: 0
                        },
                        {
                            question: "'एवेरेस्ट : मेरी शिखर यात्रा' के लेखक कौन हैं?",
                            options: ["बचेंद्री पाल", "अरुणिमा सिन्हा", "सन्तोष यादव", "प्रेमलता अग्रवाल"],
                            answer: 0
                        }
                    ];
                    break;
                case 'math':
                    subjectQuestions = [
                        {
                            question: "What is the value of π (pi) correct to two decimal places?",
                            options: ["3.14", "3.16", "3.12", "3.18"],
                            answer: 0
                        },
                        {
                            question: "What is the formula for the area of a circle?",
                            options: ["πr²", "2πr", "πd", "2πr²"],
                            answer: 0
                        },
                        {
                            question: "What is the sum of the angles in a triangle?",
                            options: ["180°", "90°", "360°", "270°"],
                            answer: 0
                        },
                        {
                            question: "What is the value of (a+b)²?",
                            options: ["a² + 2ab + b²", "a² + b²", "a² - 2ab + b²", "a² - b²"],
                            answer: 0
                        },
                        {
                            question: "What is the formula for the volume of a cylinder?",
                            options: ["πr²h", "2πrh", "πr²", "2πr²h"],
                            answer: 0
                        },
                        {
                            question: "What is the square root of 144?",
                            options: ["12", "14", "16", "18"],
                            answer: 0
                        },
                        {
                            question: "What is the formula for the Pythagorean theorem?",
                            options: ["a² + b² = c²", "a + b = c", "a² - b² = c²", "a × b = c"],
                            answer: 0
                        },
                        {
                            question: "What is the value of 5! (5 factorial)?",
                            options: ["120", "60", "24", "720"],
                            answer: 0
                        },
                        {
                            question: "What is the formula for the circumference of a circle?",
                            options: ["2πr", "πr²", "πd", "Both 2πr and πd"],
                            answer: 3
                        },
                        {
                            question: "What is the solution to the equation 2x + 5 = 15?",
                            options: ["x = 5", "x = 10", "x = 7.5", "x = 2.5"],
                            answer: 0
                        }
                    ];
                    break;
                case 'science':
                    subjectQuestions = [
                        {
                            question: "What is the chemical symbol for gold?",
                            options: ["Au", "Ag", "Fe", "Cu"],
                            answer: 0
                        },
                        {
                            question: "What is the unit of electric current?",
                            options: ["Ampere", "Volt", "Ohm", "Watt"],
                            answer: 0
                        },
                        {
                            question: "Which gas is most abundant in Earth's atmosphere?",
                            options: ["Nitrogen", "Oxygen", "Carbon dioxide", "Argon"],
                            answer: 0
                        },
                        {
                            question: "What is the speed of light in vacuum?",
                            options: ["3 × 10^8 m/s", "3 × 10^5 m/s", "3 × 10^3 m/s", "3 × 10^10 m/s"],
                            answer: 0
                        },
                        {
                            question: "What is the pH value of pure water?",
                            options: ["7", "0", "14", "1"],
                            answer: 0
                        },
                        {
                            question: "Which planet is known as the Red Planet?",
                            options: ["Mars", "Venus", "Jupiter", "Saturn"],
                            answer: 0
                        },
                        {
                            question: "What is the chemical formula of water?",
                            options: ["H₂O", "CO₂", "NaCl", "CH₄"],
                            answer: 0
                        },
                        {
                            question: "Which cell organelle is called the powerhouse of the cell?",
                            options: ["Mitochondria", "Nucleus", "Ribosome", "Golgi apparatus"],
                            answer: 0
                        },
                        {
                            question: "What is the SI unit of force?",
                            options: ["Newton", "Joule", "Pascal", "Watt"],
                            answer: 0
                        },
                        {
                            question: "Which metal is liquid at room temperature?",
                            options: ["Mercury", "Iron", "Copper", "Aluminum"],
                            answer: 0
                        }
                    ];
                    break;
                case 'social':
                    subjectQuestions = [
                        {
                            question: "Who was the first President of India?",
                            options: ["Dr. Rajendra Prasad", "Jawaharlal Nehru", "Sardar Vallabhbhai Patel", "Dr. S. Radhakrishnan"],
                            answer: 0
                        },
                        {
                            question: "Which is the longest river in India?",
                            options: ["Ganga", "Yamuna", "Brahmaputra", "Godavari"],
                            answer: 0
                        },
                        {
                            question: "Who wrote the Indian National Anthem?",
                            options: ["Rabindranath Tagore", "Bankim Chandra Chattopadhyay", "Sarojini Naidu", "Mahatma Gandhi"],
                            answer: 0
                        },
                        {
                            question: "When did India gain independence?",
                            options: ["1947", "1945", "1950", "1942"],
                            answer: 0
                        },
                        {
                            question: "Which is the highest mountain peak in India?",
                            options: ["Kanchenjunga", "Mount Everest", "Nanda Devi", "Kamet"],
                            answer: 0
                        },
                        {
                            question: "Who is known as the Father of the Indian Constitution?",
                            options: ["Dr. B.R. Ambedkar", "Mahatma Gandhi", "Jawaharlal Nehru", "Sardar Patel"],
                            answer: 0
                        },
                        {
                            question: "Which is the national animal of India?",
                            options: ["Tiger", "Lion", "Elephant", "Peacock"],
                            answer: 0
                        },
                        {
                            question: "What is the capital of India?",
                            options: ["New Delhi", "Mumbai", "Kolkata", "Chennai"],
                            answer: 0
                        },
                        {
                            question: "Who was the first Prime Minister of India?",
                            options: ["Jawaharlal Nehru", "Indira Gandhi", "Lal Bahadur Shastri", "Morarji Desai"],
                            answer: 0
                        },
                        {
                            question: "Which is the largest state in India by area?",
                            options: ["Rajasthan", "Madhya Pradesh", "Maharashtra", "Uttar Pradesh"],
                            answer: 0
                        }
                    ];
                    break;
                case 'it':
                    subjectQuestions = [
                        {
                            question: "What does CPU stand for?",
                            options: ["Central Processing Unit", "Computer Processing Unit", "Central Program Unit", "Computer Program Unit"],
                            answer: 0
                        },
                        {
                            question: "Which of these is an operating system?",
                            options: ["Windows", "Microsoft Office", "Adobe Photoshop", "Google Chrome"],
                            answer: 0
                        },
                        {
                            question: "What is the full form of HTML?",
                            options: ["HyperText Markup Language", "HighText Machine Language", "HyperText Machine Language", "HighText Markup Language"],
                            answer: 0
                        },
                        {
                            question: "Which of these is a programming language?",
                            options: ["Python", "Windows", "Excel", "PowerPoint"],
                            answer: 0
                        },
                        {
                            question: "What does RAM stand for?",
                            options: ["Random Access Memory", "Read Access Memory", "Random Available Memory", "Read Available Memory"],
                            answer: 0
                        },
                        {
                            question: "Which company developed the Windows operating system?",
                            options: ["Microsoft", "Apple", "Google", "IBM"],
                            answer: 0
                        },
                        {
                            question: "What is the binary equivalent of decimal number 10?",
                            options: ["1010", "1001", "1100", "1011"],
                            answer: 0
                        },
                        {
                            question: "Which of these is a database management system?",
                            options: ["MySQL", "Java", "C++", "Python"],
                            answer: 0
                        },
                        {
                            question: "What does URL stand for?",
                            options: ["Uniform Resource Locator", "Universal Resource Locator", "Uniform Resource Link", "Universal Resource Link"],
                            answer: 0
                        },
                        {
                            question: "Which protocol is used for sending email?",
                            options: ["SMTP", "HTTP", "FTP", "TCP"],
                            answer: 0
                        }
                    ];
                    break;
                default:
                    subjectQuestions = [
                        {
                            question: "Sample question 1?",
                            options: ["Option A", "Option B", "Option C", "Option D"],
                            answer: 0
                        },
                        {
                            question: "Sample question 2?",
                            options: ["Option A", "Option B", "Option C", "Option D"],
                            answer: 1
                        }
                    ];
            }
            
            return subjectQuestions;
        }

        // If startQuiz button clicked
        start_btn.onclick = ()=>{
            info_box.classList.add("activeInfo"); //show info box
        }

        // If exitQuiz button clicked
        exit_btn.onclick = ()=>{
            info_box.classList.remove("activeInfo"); //hide info box
        }

        // If continueQuiz button clicked
        continue_btn.onclick = ()=>{
            info_box.classList.remove("activeInfo"); //hide info box
            quiz_box.classList.add("activeQuiz"); //show quiz box
            showQuetions(0); //calling showQestions function
            queCounter(1); //passing 1 parameter to queCounter
            startTimer(15); //calling startTimer function
            startTimerLine(0); //calling startTimerLine function
        }

        // If quitQuiz button clicked
        const quit_quiz = result_box.querySelector(".buttons .quit");
        quit_quiz.onclick = ()=>{
            window.location.reload(); //reload the current window
        }

        // If restartQuiz button clicked
        const restart_quiz = result_box.querySelector(".buttons .restart");
        restart_quiz.onclick = ()=>{
            quiz_box.classList.add("activeQuiz"); //show quiz box
            result_box.classList.remove("activeResult"); //hide result box
            que_count = 0;
            que_numb = 1;
            userScore = 0;
            widthValue = 0;
            score = 0;
            userAnswers = [];
            showQuetions(que_count); //calling showQestions function
            queCounter(que_numb); //passing que_numb value to queCounter
            clearInterval(counter); //clear counter
            clearInterval(counterLine); //clear counterLine
            startTimer(15); //calling startTimer function
            startTimerLine(widthValue); //calling startTimerLine function
            timeText.textContent = "Time Left"; //change the text of timeText to Time Left
            next_btn.classList.remove("show"); //hide the next button
        }

        // Getting questions and options from array
        function showQuetions(index){
            const que_text = document.querySelector(".que_text");

            //creating a new span and div tag for question and option and passing the value using array index
            let que_tag = '<span>'+ questions[index].question +'</span>';
            let option_tag = '<div class="option"><span>'+ questions[index].options[0] +'</span></div>'
            + '<div class="option"><span>'+ questions[index].options[1] +'</span></div>'
            + '<div class="option"><span>'+ questions[index].options[2] +'</span></div>'
            + '<div class="option"><span>'+ questions[index].options[3] +'</span></div>';
            que_text.innerHTML = que_tag; //adding new span tag inside que_tag
            option_list.innerHTML = option_tag; //adding new div tag inside option_tag
            
            const option = option_list.querySelectorAll(".option");

            // set onclick attribute to all available options
            for(i=0; i < option.length; i++){
                option[i].setAttribute("onclick", "optionSelected(this)");
            }
        }

        // creating the new div tags which for icons
        let tickIconTag = '<div class="icon tick"><i class="fas fa-check"></i></div>';
        let crossIconTag = '<div class="icon cross"><i class="fas fa-times"></i></div>';

        //if user clicked on option
        function optionSelected(answer){
            clearInterval(counter); //clear counter
            clearInterval(counterLine); //clear counterLine
            let userAns = answer.textContent; //getting user selected option
            let correcAns = questions[que_count].options[questions[que_count].answer]; //getting correct answer from array
            const allOptions = option_list.children.length; //getting all option items
            
            userAnswers.push(getOptionIndex(userAns, questions[que_count].options)); // Store user answer
            
            if(userAns == correcAns){ //if user selected option is equal to array's correct answer
                userScore += 1; //upgrading score value with 1
                score += 1; //upgrading score value with 1
                answer.classList.add("correct"); //adding green color to correct selected option
                answer.insertAdjacentHTML("beforeend", tickIconTag); //adding tick icon to correct selected option
                console.log("Correct Answer");
                console.log("Your correct answers = " + score);
            }else{
                answer.classList.add("incorrect"); //adding red color to correct selected option
                answer.insertAdjacentHTML("beforeend", crossIconTag); //adding cross icon to correct selected option
                console.log("Wrong Answer");

                for(i=0; i < allOptions; i++){
                    if(option_list.children[i].textContent == correcAns){ //if there is an option which is matched to an array answer 
                        option_list.children[i].setAttribute("class", "option correct"); //adding green color to matched option
                        option_list.children[i].insertAdjacentHTML("beforeend", tickIconTag); //adding tick icon to matched option
                        console.log("Auto selected correct answer.");
                    }
                }
            }
            for(i=0; i < allOptions; i++){
                option_list.children[i].classList.add("disabled"); //once user select an option then disabled all options
            }
            next_btn.classList.add("show"); //show the next button if user selected any option
        }

        function getOptionIndex(selectedOption, options) {
            for(let i = 0; i < options.length; i++) {
                if(options[i] === selectedOption) {
                    return i;
                }
            }
            return -1;
        }

        function showResult(){
            info_box.classList.remove("activeInfo"); //hide info box
            quiz_box.classList.remove("activeQuiz"); //hide quiz box
            result_box.classList.add("activeResult"); //show result box
            
            // Update user info in result box
            document.getElementById('resultUserName').textContent = currentUser.name;
            document.getElementById('resultUserEmail').textContent = currentUser.email;
            document.getElementById('resultProfilePic').src = currentUser.profilePic;
            document.getElementById('resultDate').textContent = 'Date: ' + new Date().toLocaleDateString();
            
            const scoreText = result_box.querySelector(".score_text");
            if (userScore > 3){ // if user scored more than 3
                //creating a new span tag and passing the user score number and total question number
                let scoreTag = '<span>and congrats! 🎉, You got <p>'+ userScore +'</p> out of <p>'+ questions.length +'</p></span>';
                scoreText.innerHTML = scoreTag;  //adding new span tag inside score_Text
            }
            else if(userScore > 1){ // if user scored more than 1
                let scoreTag = '<span>and nice 😎, You got <p>'+ userScore +'</p> out of <p>'+ questions.length +'</p></span>';
                scoreText.innerHTML = scoreTag;
            }
            else{ // if user scored less than 1
                let scoreTag = '<span>and sorry 😐, You got only <p>'+ userScore +'</p> out of <p>'+ questions.length +'</p></span>';
                scoreText.innerHTML = scoreTag;
            }
            
            // Send quiz results via EmailJS
            sendQuizResults();
        }

        function sendQuizResults() {
            const templateParams = {
                to_email: 'nasirahmad65688@gmail.com',
                from_name: currentUser.name,
                user_email: currentUser.email,
                user_phone: currentUser.phone,
                subject: getSubjectName(selectedSubject),
                score: userScore,
                total_questions: questions.length,
                certificate_code: certificateCode,
                date: new Date().toLocaleDateString()
            };

            emailjs.send('service_muuk7fh', 'template_nna6wsb', templateParams)
                .then(function(response) {
                    console.log('SUCCESS!', response.status, response.text);
                }, function(error) {
                    console.log('FAILED...', error);
                });
        }

        function startTimer(time){
            counter = setInterval(timer, 1000);
            function timer(){
                timeCount.textContent = time; //changing the value of timeCount with time value
                time--; //decrement the time value
                if(time < 9){ //if timer is less than 9
                    let addZero = timeCount.textContent; 
                    timeCount.textContent = "0" + addZero; //add a 0 before time value
                }
                if(time < 0){ //if timer is less than 0
                    clearInterval(counter); //clear counter
                    timeText.textContent = "Time Off"; //change the time text to time off
                    const allOptions = option_list.children.length; //getting all option items
                    let correcAns = questions[que_count].options[questions[que_count].answer]; //getting correct answer from array
            
                    // Store unanswered as -1
                    userAnswers.push(-1);
            
                    for(i=0; i < allOptions; i++){
                        if(option_list.children[i].textContent == correcAns){ //if there is an option which is matched to an array answer
                            option_list.children[i].setAttribute("class", "option correct"); //adding green color to matched option
                            option_list.children[i].insertAdjacentHTML("beforeend", tickIconTag); //adding tick icon to matched option
                        }
                    }
                    for(i=0; i < allOptions; i++){
                        option_list.children[i].classList.add("disabled"); //once user select an option then disabled all options
                    }
                    next_btn.classList.add("show"); //show the next button if user selected any option
                }
            }
        }

        function startTimerLine(time){
            counterLine = setInterval(timer, 29);
            function timer(){
                time += 1; //upgrading time value with 1
                time_line.style.width = time + "px"; //increasing width of time_line with px by time value
                if(time > 549){ //if time value is greater than 549
                    clearInterval(counterLine); //clear counterLine
                }
            }
        }

        function queCounter(index){
            //creating a new span tag and passing the question number and total question
            let totalQueCounTag = '<span><p>'+ index +'</p> of <p>'+ questions.length +'</p> Questions</span>';
            bottom_ques_counter.innerHTML = totalQueCounTag;  //adding new span tag inside bottom_ques_counter
        }

        const next_btn = document.querySelector("footer .next_btn");
        const bottom_ques_counter = document.querySelector("footer .total_que");

        // if Next Que button clicked
        next_btn.onclick = ()=>{
            if(que_count < questions.length - 1){ //if question count is less than total question length
                que_count++; //increment the que_count value
                que_numb++; //increment the que_numb value
                showQuetions(que_count); //calling showQestions function
                queCounter(que_numb); //passing que_numb value to queCounter
                clearInterval(counter); //clear counter
                clearInterval(counterLine); //clear counterLine
                startTimer(15); //calling startTimer function
                startTimerLine(widthValue); //calling startTimerLine function
                timeText.textContent = "Time Left"; //change the timeText to Time Left
                next_btn.classList.remove("show"); //hide the next button
            }else{
                clearInterval(counter); //clear counter
                clearInterval(counterLine); //clear counterLine
                showResult(); //calling showResult function
            }
        }

        // Initialize the application
        showLogin();
    </script>
</body>
</html>